Paradygmaty programowania - cwiczenia Lista 1  

Wszystkie funkcje nalezy napisac w obu jezykach: OCaml i Scala. 
W specyfikacjach jest wykorzystywana notacja OCamla, poniewaz jest prostsza. 
W programach mozna uzywac wylacznie konstrukcji jezykowych przedstawionych na wykladach!  

1. Zdefiniuj funkcje flatten : 'a list list -> 'a list, która dla argumentu bedacego lista list        
tworzy liste, zlozona z  elementów wszystkich podlist z zachowaniem ich kolejnosci,      
np. flatten [[5;6];[1;2;3]] zwraca [5; 6; 1; 2; 3], czyli splaszcza liste o jeden poziom.  

2. Zdefiniuj funkcje count : 'a * 'a list -> int obliczajaca ile razy dany obiekt wystepuje     
 w danej liscie, np. count  ('a',  ['a';  'l'; 'a']) zwraca 2.   

3. Zdefiniuj funkcje duplicate: 'a * int -> 'a list powtarzajaca dany obiekt okreslona  liczbe      
razy i zwracajaca wynik w postaci listy, np. duplicate ("la",3)  zwraca ["la"; "la"; "la"].  

4. Zdefiniuj funkcje sqrList  : int list -> int list  podnoszaca do  kwadratu wszystkie elementy        
danej listy liczb, np. sqrList  [1;2;3;-4] zwraca [1; 4; 9; 16].  

5. Zdefiniuj funkcje palindrome : 'a list -> bool  sprawdzajaca,  czy dana lista jest      
palindromem, tj. równa sie sobie samej przy odwróconej kolejnosci elementów,      np. palindrome ['a'; 'l'; 'a']} zwraca true.  

6. Zdefiniuj funkcje listLength  : 'a list -> int, obliczajaca dlugosc dowolnej listy.  

7. Zdefiniuj funkcje listAppend, konkatenujaca dwie listy.   